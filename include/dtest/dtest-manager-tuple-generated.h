// This file was GENERATED by command:
//     pump.py dtest-manager-tuple-generated.h.pump
// DO NOT EDIT BY HAND!!!

//==============================================================================
/**
 * @file    dtest/dtest-manager-tuple-generated.h
 *
 * @brief   header of DtestManagerTuple
 *
 * @author  ymoch
 * @date    2014-11-01  ymoch
 */
//==============================================================================
#ifndef INCLUDE_DTEST_DTEST_MANAGER_TUPLE_GENERATED_H
#define INCLUDE_DTEST_DTEST_MANAGER_TUPLE_GENERATED_H

#include "dtest-manager-base.h"

namespace dtest {

//==============================================================================
/**
 * @brief   dtest manager implemented by tuple
 */
//==============================================================================
class DtestManagerTuple : public DtestManagerBase
{
public:
    /**
     * @brief       default constructor
     */
    DtestManagerTuple() : DtestManagerBase() {}

    /**
     * @brief       destructor
     */
    ~DtestManagerTuple() {}

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);

                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10 << log11;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11, class T12>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11, const T12& log12)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10 << log11 << log12;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11, class T12, class T13>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11, const T12& log12,
                const T13& log13)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6

                    << log7 << log8 << log9 << log10 << log11 << log12 << log13;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11, class T12, class T13, class T14>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11, const T12& log12,
                const T13& log13, const T14& log14)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10 << log11 << log12 << log13
                    << log14;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11, class T12, class T13, class T14, class T15>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11, const T12& log12,
                const T13& log13, const T14& log14, const T15& log15)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10 << log11 << log12 << log13
                    << log14 << log15;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11, class T12, class T13, class T14, class T15, class T16>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11, const T12& log12,
                const T13& log13, const T14& log14, const T15& log15,
                const T16& log16)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10 << log11 << log12 << log13
                    << log14 << log15 << log16;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11, class T12, class T13, class T14, class T15, class T16,
        class T17>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11, const T12& log12,
                const T13& log13, const T14& log14, const T15& log15,
                const T16& log16, const T17& log17)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10 << log11 << log12 << log13
                    << log14 << log15 << log16 << log17;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11, class T12, class T13, class T14, class T15, class T16,
        class T17, class T18>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11, const T12& log12,
                const T13& log13, const T14& log14, const T15& log15,
                const T16& log16, const T17& log17, const T18& log18)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10 << log11 << log12 << log13
                    << log14 << log15 << log16 << log17 << log18;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11, class T12, class T13, class T14, class T15, class T16,
        class T17, class T18, class T19>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11, const T12& log12,
                const T13& log13, const T14& log14, const T15& log15,
                const T16& log16, const T17& log17, const T18& log18,
                const T19& log19)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10 << log11 << log12 << log13
                    << log14 << log15 << log16 << log17 << log18 << log19;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

    /**
     * @brief       execute test
     *
     * @tparam      Value       tested value type
     * @tparam      Matcher     matcher type
     *                          Required to be implemented:
     *                          - bool Matches(Value)
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     * @tparam      T*          log type
     *                          Required to be implemented:
     *                          - ::std::ostream& operator<<(
     *                                ::std::ostream, const Matcher&)
     *
     * @param[in]   test_name   test name
     * @param[in]   value       tested value
     * @param[in]   matcher     matcher
     * @param[in]   log*        logs
     *
     * @retval      true        test succeeded
     * @retval      false       test failed
     */
    template <class Value, class Matcher, class T1, class T2, class T3,
        class T4, class T5, class T6, class T7, class T8, class T9, class T10,
        class T11, class T12, class T13, class T14, class T15, class T16,
        class T17, class T18, class T19, class T20>
    bool TestThat(
            const char* const test_name, const Value& value,
                const Matcher& matcher, const T1& log1, const T2& log2,
                const T3& log3, const T4& log4, const T5& log5, const T6& log6,
                const T7& log7, const T8& log8, const T9& log9,
                const T10& log10, const T11& log11, const T12& log12,
                const T13& log13, const T14& log14, const T15& log15,
                const T16& log16, const T17& log17, const T18& log18,
                const T19& log19, const T20& log20)
    {
        const bool result = matcher.Matches(value);
        if (!result) {
            if (detail_stream_ != NULL) {
                PrintCommonLog(test_name, value, matcher);
                *detail_stream_ << log1 << log2 << log3 << log4 << log5 << log6
                    << log7 << log8 << log9 << log10 << log11 << log12 << log13
                    << log14 << log15 << log16 << log17 << log18 << log19 <<
                    log20;
                EndLog();
            }
            is_succeeded_ = false;
        }
        return result;
    }

private:
    template <class Value, class Matcher>
    void PrintCommonLog(
            const char* const test_name,
            const Value& value,
            const Matcher& matcher)
    {
        *detail_stream_ << test_name << ','
                        << value << ','
                        << matcher << ',';
    }

    void EndLog()
    {
        *detail_stream_ << '\n';
    }
};

} // namespace dtest

#endif // INCLUDE_DTEST_DTEST_MANAGER_TUPLE_GENERATED_H
