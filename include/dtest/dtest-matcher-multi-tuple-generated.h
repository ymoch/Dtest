// This file was GENERATED by command:
//     pump.py dtest-matcher-multi-tuple-generated.h.pump
// DO NOT EDIT BY HAND!!!

//==============================================================================
/**
 * @file    dtest/dtest-matcher-multi-tuple-generated.h
 *
 * @brief   header of Dtest multi-value matchers implemented by tuple
 *
 * @author  ymoch
 * @date    2014-11-01  ymoch
 */
//==============================================================================
#ifndef INCLUDE_DTEST_DTEST_MATCHER_MULTI_GENERATED_H
#define INCLUDE_DTEST_DTEST_MATCHER_MULTI_GENERATED_H

#include "internal/dtest-combiners.h"

namespace dtest {

//==============================================================================
/**
 * @brief   tuple matcher (N = 1)
 */
//==============================================================================
template <class Combiner, class T1>
class TupleMatcher1
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher1(const T1& matcher)
        : matcher_(matcher) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return matcher_.Matches(value);
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << matcher_ << ")";
    }

private:
    T1 matcher_;    //!< matcher
};
//==============================================================================
/**
 * @brief   tuple matcher (N = 2)
 */
//==============================================================================
template <class Combiner, class T1, class T2>
class TupleMatcher2
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher2(const T1& m1, const T2& m2)
        : head_matcher_(m1), tail_matchers_(m2) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return Combiner::Combine(
                    head_matcher_.Matches(value),
                    tail_matchers_.Matches(value));
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << head_matcher_ << ") "
            << Combiner::GetOperatorString() << " "
            << tail_matchers_;
    }

private:
    /**
     * @brief       head matcher
     */
    T1 head_matcher_;

    /**
     * @brief       tail matchers
     */
    TupleMatcher1<Combiner, T2> tail_matchers_;
};

//==============================================================================
/**
 * @brief   tuple matcher (N = 3)
 */
//==============================================================================
template <class Combiner, class T1, class T2, class T3>
class TupleMatcher3
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher3(const T1& m1, const T2& m2, const T3& m3)
        : head_matcher_(m1), tail_matchers_(m2, m3) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return Combiner::Combine(
                    head_matcher_.Matches(value),
                    tail_matchers_.Matches(value));
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << head_matcher_ << ") "
            << Combiner::GetOperatorString() << " "
            << tail_matchers_;
    }

private:
    /**
     * @brief       head matcher
     */
    T1 head_matcher_;

    /**
     * @brief       tail matchers
     */
    TupleMatcher2<Combiner, T2, T3> tail_matchers_;
};

//==============================================================================
/**
 * @brief   tuple matcher (N = 4)
 */
//==============================================================================
template <class Combiner, class T1, class T2, class T3, class T4>
class TupleMatcher4
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher4(const T1& m1, const T2& m2, const T3& m3, const T4& m4)
        : head_matcher_(m1), tail_matchers_(m2, m3, m4) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return Combiner::Combine(
                    head_matcher_.Matches(value),
                    tail_matchers_.Matches(value));
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << head_matcher_ << ") "
            << Combiner::GetOperatorString() << " "
            << tail_matchers_;
    }

private:
    /**
     * @brief       head matcher
     */
    T1 head_matcher_;

    /**
     * @brief       tail matchers
     */
    TupleMatcher3<Combiner, T2, T3, T4> tail_matchers_;
};

//==============================================================================
/**
 * @brief   tuple matcher (N = 5)
 */
//==============================================================================
template <class Combiner, class T1, class T2, class T3, class T4, class T5>
class TupleMatcher5
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher5(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
        const T5& m5)
        : head_matcher_(m1), tail_matchers_(m2, m3, m4, m5) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return Combiner::Combine(
                    head_matcher_.Matches(value),
                    tail_matchers_.Matches(value));
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << head_matcher_ << ") "
            << Combiner::GetOperatorString() << " "
            << tail_matchers_;
    }

private:
    /**
     * @brief       head matcher
     */
    T1 head_matcher_;

    /**
     * @brief       tail matchers
     */
    TupleMatcher4<Combiner, T2, T3, T4, T5> tail_matchers_;
};

//==============================================================================
/**
 * @brief   tuple matcher (N = 6)
 */
//==============================================================================
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6>
class TupleMatcher6
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher6(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
        const T5& m5, const T6& m6)
        : head_matcher_(m1), tail_matchers_(m2, m3, m4, m5, m6) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return Combiner::Combine(
                    head_matcher_.Matches(value),
                    tail_matchers_.Matches(value));
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << head_matcher_ << ") "
            << Combiner::GetOperatorString() << " "
            << tail_matchers_;
    }

private:
    /**
     * @brief       head matcher
     */
    T1 head_matcher_;

    /**
     * @brief       tail matchers
     */
    TupleMatcher5<Combiner, T2, T3, T4, T5, T6> tail_matchers_;
};

//==============================================================================
/**
 * @brief   tuple matcher (N = 7)
 */
//==============================================================================
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6, class T7>
class TupleMatcher7
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher7(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
        const T5& m5, const T6& m6, const T7& m7)
        : head_matcher_(m1), tail_matchers_(m2, m3, m4, m5, m6, m7) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return Combiner::Combine(
                    head_matcher_.Matches(value),
                    tail_matchers_.Matches(value));
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << head_matcher_ << ") "
            << Combiner::GetOperatorString() << " "
            << tail_matchers_;
    }

private:
    /**
     * @brief       head matcher
     */
    T1 head_matcher_;

    /**
     * @brief       tail matchers
     */
    TupleMatcher6<Combiner, T2, T3, T4, T5, T6, T7> tail_matchers_;
};

//==============================================================================
/**
 * @brief   tuple matcher (N = 8)
 */
//==============================================================================
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6, class T7, class T8>
class TupleMatcher8
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher8(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
        const T5& m5, const T6& m6, const T7& m7, const T8& m8)
        : head_matcher_(m1), tail_matchers_(m2, m3, m4, m5, m6, m7, m8) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return Combiner::Combine(
                    head_matcher_.Matches(value),
                    tail_matchers_.Matches(value));
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << head_matcher_ << ") "
            << Combiner::GetOperatorString() << " "
            << tail_matchers_;
    }

private:
    /**
     * @brief       head matcher
     */
    T1 head_matcher_;

    /**
     * @brief       tail matchers
     */
    TupleMatcher7<Combiner, T2, T3, T4, T5, T6, T7, T8> tail_matchers_;
};

//==============================================================================
/**
 * @brief   tuple matcher (N = 9)
 */
//==============================================================================
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6, class T7, class T8, class T9>
class TupleMatcher9
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher9(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
        const T5& m5, const T6& m6, const T7& m7, const T8& m8, const T9& m9)
        : head_matcher_(m1), tail_matchers_(m2, m3, m4, m5, m6, m7, m8, m9) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return Combiner::Combine(
                    head_matcher_.Matches(value),
                    tail_matchers_.Matches(value));
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << head_matcher_ << ") "
            << Combiner::GetOperatorString() << " "
            << tail_matchers_;
    }

private:
    /**
     * @brief       head matcher
     */
    T1 head_matcher_;

    /**
     * @brief       tail matchers
     */
    TupleMatcher8<Combiner, T2, T3, T4, T5, T6, T7, T8, T9> tail_matchers_;
};

//==============================================================================
/**
 * @brief   tuple matcher (N = 10)
 */
//==============================================================================
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6, class T7, class T8, class T9, class T10>
class TupleMatcher10
{
public:
    /**
     * @brief       constructor
     */
    TupleMatcher10(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
        const T5& m5, const T6& m6, const T7& m7, const T8& m8, const T9& m9,
        const T10& m10)
        : head_matcher_(m1), tail_matchers_(m2, m3, m4, m5, m6, m7, m8, m9,
            m10) {}

    /**
     * @brief       check that it matches
     *
     * @tparam      ValueType       value type
     * @param[in]   value           value to Matches
     * @retval      true            it matches
     * @retval      false           it doesn't match
     */
    template <class ValueType>
    bool Matches(const ValueType& value) const
    {
        return Combiner::Combine(
                    head_matcher_.Matches(value),
                    tail_matchers_.Matches(value));
    }

    /**
     * @brief       describe self
     *
     * @param       os      output stream to describe to
     */
    void DescribeTo(::std::ostream* os) const
    {
        *os << "(" << head_matcher_ << ") "
            << Combiner::GetOperatorString() << " "
            << tail_matchers_;
    }

private:
    /**
     * @brief       head matcher
     */
    T1 head_matcher_;

    /**
     * @brief       tail matchers
     */
    TupleMatcher9<Combiner, T2, T3, T4, T5, T6, T7, T8, T9, T10> tail_matchers_;
};

//==============================================================================
// definition of inline function
//==============================================================================
/**
 * @brief           operator << for TupleMatcher1
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher1<Combiner, T1>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief           operator << for TupleMatcher2
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1, class T2>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher2<Combiner, T1, T2>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief           operator << for TupleMatcher3
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1, class T2, class T3>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher3<Combiner, T1, T2, T3>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief           operator << for TupleMatcher4
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1, class T2, class T3, class T4>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher4<Combiner, T1, T2, T3, T4>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief           operator << for TupleMatcher5
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1, class T2, class T3, class T4, class T5>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher5<Combiner, T1, T2, T3, T4, T5>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief           operator << for TupleMatcher6
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher6<Combiner, T1, T2, T3, T4, T5, T6>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief           operator << for TupleMatcher7
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6, class T7>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher7<Combiner, T1, T2, T3, T4, T5, T6, T7>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief           operator << for TupleMatcher8
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6, class T7, class T8>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher8<Combiner, T1, T2, T3, T4, T5, T6, T7, T8>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief           operator << for TupleMatcher9
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6, class T7, class T8, class T9>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher9<Combiner, T1, T2, T3, T4, T5, T6, T7, T8, T9>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief           operator << for TupleMatcher10
 *
 * @param[in,out]   os          output stream
 * @param[in]       matcher     matcher
 */
template <class Combiner, class T1, class T2, class T3, class T4, class T5,
    class T6, class T7, class T8, class T9, class T10>
inline ::std::ostream& operator<<(::std::ostream& os,
    const TupleMatcher10<Combiner, T1, T2, T3, T4, T5, T6, T7, T8, T9,
    T10>& matcher)
{
    matcher.DescribeTo(&os);
    return os;
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1>
inline TupleMatcher1<AndCombiner, T1> AllOf(const T1& m1)
{
    return TupleMatcher1<AndCombiner, T1>(m1);
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1, class T2>
inline TupleMatcher2<AndCombiner, T1, T2> AllOf(const T1& m1, const T2& m2)
{
    return TupleMatcher2<AndCombiner, T1, T2>(m1, m2);
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3>
inline TupleMatcher3<AndCombiner, T1, T2, T3> AllOf(const T1& m1, const T2& m2,
    const T3& m3)
{
    return TupleMatcher3<AndCombiner, T1, T2, T3>(m1, m2, m3);
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4>
inline TupleMatcher4<AndCombiner, T1, T2, T3, T4> AllOf(const T1& m1,
    const T2& m2, const T3& m3, const T4& m4)
{
    return TupleMatcher4<AndCombiner, T1, T2, T3, T4>(m1, m2, m3, m4);
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5>
inline TupleMatcher5<AndCombiner, T1, T2, T3, T4, T5> AllOf(const T1& m1,
    const T2& m2, const T3& m3, const T4& m4, const T5& m5)
{
    return TupleMatcher5<AndCombiner, T1, T2, T3, T4, T5>(m1, m2, m3, m4, m5);
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6>
inline TupleMatcher6<AndCombiner, T1, T2, T3, T4, T5, T6> AllOf(const T1& m1,
    const T2& m2, const T3& m3, const T4& m4, const T5& m5, const T6& m6)
{
    return TupleMatcher6<AndCombiner, T1, T2, T3, T4, T5, T6>(m1, m2, m3, m4,
        m5, m6);
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7>
inline TupleMatcher7<AndCombiner, T1, T2, T3, T4, T5, T6,
    T7> AllOf(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
    const T5& m5, const T6& m6, const T7& m7)
{
    return TupleMatcher7<AndCombiner, T1, T2, T3, T4, T5, T6, T7>(m1, m2, m3,
        m4, m5, m6, m7);
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7,
    class T8>
inline TupleMatcher8<AndCombiner, T1, T2, T3, T4, T5, T6, T7,
    T8> AllOf(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
    const T5& m5, const T6& m6, const T7& m7, const T8& m8)
{
    return TupleMatcher8<AndCombiner, T1, T2, T3, T4, T5, T6, T7, T8>(m1, m2,
        m3, m4, m5, m6, m7, m8);
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7,
    class T8, class T9>
inline TupleMatcher9<AndCombiner, T1, T2, T3, T4, T5, T6, T7, T8,
    T9> AllOf(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
    const T5& m5, const T6& m6, const T7& m7, const T8& m8, const T9& m9)
{
    return TupleMatcher9<AndCombiner, T1, T2, T3, T4, T5, T6, T7, T8, T9>(m1,
        m2, m3, m4, m5, m6, m7, m8, m9);
}

/**
 * @brief       create AND matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7,
    class T8, class T9, class T10>
inline TupleMatcher10<AndCombiner, T1, T2, T3, T4, T5, T6, T7, T8, T9,
    T10> AllOf(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
    const T5& m5, const T6& m6, const T7& m7, const T8& m8, const T9& m9,
    const T10& m10)
{
    return TupleMatcher10<AndCombiner, T1, T2, T3, T4, T5, T6, T7, T8, T9,
        T10>(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1>
inline TupleMatcher1<OrCombiner, T1> AnyOf(const T1& m1)
{
    return TupleMatcher1<OrCombiner, T1>(m1);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1, class T2>
inline TupleMatcher2<OrCombiner, T1, T2> AnyOf(const T1& m1, const T2& m2)
{
    return TupleMatcher2<OrCombiner, T1, T2>(m1, m2);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3>
inline TupleMatcher3<OrCombiner, T1, T2, T3> AnyOf(const T1& m1, const T2& m2,
    const T3& m3)
{
    return TupleMatcher3<OrCombiner, T1, T2, T3>(m1, m2, m3);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4>
inline TupleMatcher4<OrCombiner, T1, T2, T3, T4> AnyOf(const T1& m1,
    const T2& m2, const T3& m3, const T4& m4)
{
    return TupleMatcher4<OrCombiner, T1, T2, T3, T4>(m1, m2, m3, m4);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5>
inline TupleMatcher5<OrCombiner, T1, T2, T3, T4, T5> AnyOf(const T1& m1,
    const T2& m2, const T3& m3, const T4& m4, const T5& m5)
{
    return TupleMatcher5<OrCombiner, T1, T2, T3, T4, T5>(m1, m2, m3, m4, m5);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6>
inline TupleMatcher6<OrCombiner, T1, T2, T3, T4, T5, T6> AnyOf(const T1& m1,
    const T2& m2, const T3& m3, const T4& m4, const T5& m5, const T6& m6)
{
    return TupleMatcher6<OrCombiner, T1, T2, T3, T4, T5, T6>(m1, m2, m3, m4,
        m5, m6);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7>
inline TupleMatcher7<OrCombiner, T1, T2, T3, T4, T5, T6,
    T7> AnyOf(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
    const T5& m5, const T6& m6, const T7& m7)
{
    return TupleMatcher7<OrCombiner, T1, T2, T3, T4, T5, T6, T7>(m1, m2, m3,
        m4, m5, m6, m7);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7,
    class T8>
inline TupleMatcher8<OrCombiner, T1, T2, T3, T4, T5, T6, T7,
    T8> AnyOf(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
    const T5& m5, const T6& m6, const T7& m7, const T8& m8)
{
    return TupleMatcher8<OrCombiner, T1, T2, T3, T4, T5, T6, T7, T8>(m1, m2,
        m3, m4, m5, m6, m7, m8);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7,
    class T8, class T9>
inline TupleMatcher9<OrCombiner, T1, T2, T3, T4, T5, T6, T7, T8,
    T9> AnyOf(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
    const T5& m5, const T6& m6, const T7& m7, const T8& m8, const T9& m9)
{
    return TupleMatcher9<OrCombiner, T1, T2, T3, T4, T5, T6, T7, T8, T9>(m1,
        m2, m3, m4, m5, m6, m7, m8, m9);
}

/**
 * @brief       create OR matcher
 *
 * @return      matcher
 */
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7,
    class T8, class T9, class T10>
inline TupleMatcher10<OrCombiner, T1, T2, T3, T4, T5, T6, T7, T8, T9,
    T10> AnyOf(const T1& m1, const T2& m2, const T3& m3, const T4& m4,
    const T5& m5, const T6& m6, const T7& m7, const T8& m8, const T9& m9,
    const T10& m10)
{
    return TupleMatcher10<OrCombiner, T1, T2, T3, T4, T5, T6, T7, T8, T9,
        T10>(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10);
}

} // namespace dtest

#endif // INCLUDE_DTEST_DTEST_MATCHER_MULTI_GENERATED_H
